name: deploy docs

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Create deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            // NOTE: process.env.GITHUB_REF_NAME is equivalent to github.ref_name
            const isProd = process.env.GITHUB_REF_NAME === "main";
            const envName = isProd ? "Docs Production" : "Docs Preview";
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request?.head.sha || context.sha,
              required_contexts: [],
              auto_merge: false,
              environment: envName,
              production_environment: isProd,
            });
            console.log(`Created deployment for ${envName} ID: ${deployment.id}`);

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: "pending",
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            });
            return deployment.id;

      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run -r build

      - if: github.ref_name == 'main'
        name: Deploy production
        id: deploy-prod
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: docs
      - if: github.ref_name != 'main'
        name: Deploy preview
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: docs
          command: versions upload --message "${{ github.head_ref || github.ref_name }} (${{ github.sha }})"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        env:
          IS_SUCCESS: ${{ job.status == 'success' }}
          ENVIRONMENT_URL: ${{ steps.deploy-prod.outputs.deployment-url || steps.deploy-preview.outputs.deployment-url }}
          DEPLOYMENT_ID: ${{ steps.create-deployment.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const success = process.env.IS_SUCCESS === "true";
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: success ? 'success' : 'failure',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: process.env.ENVIRONMENT_URL,
            });
            console.log(`Updated deployment as ${success ? 'success' : 'failure'}`);
